{"version":3,"sources":["components/images/4.jpg","logo.svg","components/Widget.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Widget","props","state","lat","undefined","lon","city","tempC","img","sunrise","sunset","err","date","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","process","REACT_APP_WEATHER_API_KEY","fetch","api_call","curr","moment","date_t","format","json","then","data","setState","name","Math","round","main","temp","weather","icon","unix","sys","this","getPosition","getWeather","catch","error","message","timerID","setInterval","clearInterval","className","style","backgroundImage","cardImg","backgroundPosition","backgroundSize","backgroundRepeat","alt","src","Component","App","Boolean","window","location","hostname","match","require","config","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,+B,4ECA3CD,EAAOC,QAAU,IAA0B,kC,gPCKtBC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAKC,EACLC,SAAKD,EACLE,UAAMF,EACNG,WAAOH,EACPI,SAAKJ,EACLK,aAASL,EACTM,YAAQN,EACRO,SAAKP,EACLQ,UAAMR,GAXS,E,0DAiBjB,OAAO,IAAIS,SAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCC,QAAQC,IAAIF,EAASG,QACrBR,EAAQK,KACPJ,Q,0EAIUQ,EAAUC,G,yFACzBJ,QAAQC,IAAII,qIAAYC,2B,SACDC,MAAM,iDAAD,OACuBJ,EADvB,gBACuCC,EADvC,yD,OAAtBI,E,OAMFC,EAAOC,MACPC,EAASF,EAAKG,OAAO,sBAEzBJ,EAASK,OAAOC,MAAK,SAACC,GACpB,EAAKC,SAAS,CACZjC,IAAKoB,EACLlB,IAAKmB,EACLlB,KAAM6B,EAAKE,KACX9B,MAAO+B,KAAKC,MAAMJ,EAAKK,KAAKC,MAC5BjC,IAAK2B,EAAKO,QAAQ,GAAGC,KACrB/B,KAAMmB,EACNtB,QAASqB,IAAOc,KAAKT,EAAKU,IAAIpC,SAASuB,OAAO,WAC9CtB,OAAQoB,IAAOc,KAAKT,EAAKU,IAAInC,QAAQsB,OAAO,aAE9CZ,QAAQC,IAAI,0BAA2Bc,EAAKE,MAC5CjB,QAAQC,IAAIc,M,8IAIK,IAAD,OAClBW,KAAKC,cACFb,MAAK,SAACf,GACLC,QAAQC,IAAI,uBACZ,EAAK2B,WAAW7B,EAASG,OAAOC,SAAUJ,EAASG,OAAOE,cAE3DyB,OAAM,SAACC,GACN9B,QAAQC,IAAI6B,EAAMC,YAEtB/B,QAAQC,IAAIyB,KAAK5C,OAEjB4C,KAAKM,QAAUC,aACb,kBAAM,EAAKL,WAAW,EAAK9C,MAAMC,IAAK,EAAKD,MAAMG,OACjD,O,6CAIFiD,cAAcR,KAAKM,W,+BAGnB,OAAIN,KAAK5C,MAAMI,KAGX,yBACEiD,UAAU,WACVC,MAAO,CACLC,gBAAiB,OAASC,IAAU,IACpCC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,cAGpB,yBAAKN,UAAU,WACb,yBAAKA,UAAU,eACb,4BAAKT,KAAK5C,MAAMU,MAChB,6BACE,yBACEkD,IAAI,eACJC,IAAG,0CAAqCjB,KAAK5C,MAAMM,IAAhD,WAGP,yBAAK+C,UAAU,QAAQT,KAAK5C,MAAMI,MAClC,yBAAKiD,UAAU,QAAf,gBAAoCT,KAAK5C,MAAMK,MAA/C,SACA,yBAAKgD,UAAU,QAAf,YAAgCT,KAAK5C,MAAMO,SAC3C,yBAAK8C,UAAU,QAAf,WAA+BT,KAAK5C,MAAMQ,YAMlDU,QAAQC,IAAIyB,KAAK5C,MAAMI,MAChB,6C,GAxGuB0D,aCWrBC,MAVf,WACE,OACE,yBAAKV,UAAU,WACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,SCEYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,EAAQ,IAAUC,SAElBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmB7D,WACrBA,UAAU8D,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.e954c2a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/4.1c3401ac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport \"./Widget.css\";\nimport moment from \"moment\";\nimport { mockComponent } from \"react-dom/test-utils\";\nimport cardImg from \"./images/4.jpg\";\nexport default class Widget extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: undefined,\n      lon: undefined,\n      city: undefined,\n      tempC: undefined,\n      img: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      err: undefined,\n      date: undefined,\n    };\n  }\n  // we need to find the geo location of the user\n  getPosition() {\n    // navigator.geolocation.getCurrentPosition(success[, error[, [options]])\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition((position) => {\n        console.log(position.coords);\n        resolve(position);\n      }, reject);\n    });\n  }\n\n  async getWeather(latitude, longitude) {\n    console.log(process.env.REACT_APP_WEATHER_API_KEY);\n    const api_call = await fetch(\n      `//api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=998c901d34ec248477b5630b4fb3f7b9&units=metric`\n    );\n\n    // getting current date\n\n    let curr = moment();\n    let date_t = curr.format(\"dddd, MMMM Do YYYY\");\n\n    api_call.json().then((data) => {\n      this.setState({\n        lat: latitude,\n        lon: longitude,\n        city: data.name,\n        tempC: Math.round(data.main.temp),\n        img: data.weather[0].icon,\n        date: date_t,\n        sunrise: moment.unix(data.sys.sunrise).format(\"hh:mm a\"),\n        sunset: moment.unix(data.sys.sunset).format(\"hh:mm a\"),\n      });\n      console.log(\"i have set the city to \", data.name);\n      console.log(data);\n    });\n  }\n\n  componentDidMount() {\n    this.getPosition()\n      .then((position) => {\n        console.log(\"i have the position\");\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n      })\n      .catch((error) => {\n        console.log(error.message);\n      });\n    console.log(this.state);\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  render() {\n    if (this.state.city) {\n      return (\n        // we will be getting the weather data through geographic coordinates\n        <div\n          className=\"UserCard\"\n          style={{\n            backgroundImage: \"url(\" + cardImg + \")\",\n            backgroundPosition: \"center\",\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\",\n          }}\n        >\n          <div className=\"RowUser\">\n            <div className=\"UserCardTop\">\n              <h1>{this.state.date}</h1>\n              <div>\n                <img\n                  alt=\"weather_icon\"\n                  src={`http://openweathermap.org/img/w/${this.state.img}.png`}\n                />\n              </div>\n              <div className=\"data\">{this.state.city}</div>\n              <div className=\"data\">Temperature: {this.state.tempC}Â°C</div>\n              <div className=\"data\">Sunrise: {this.state.sunrise}</div>\n              <div className=\"data\">Sunset: {this.state.sunset}</div>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      console.log(this.state.city);\n      return <div>Loading</div>;\n    }\n  }\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Widget from \"./components/Widget\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"App\">\n        <Widget />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nrequire(\"dotenv\").config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}